add2 <- function(x,y) {
x+y
}
add2(3,4)
above10 <- function(x) {
use <- x >0
x[use]
}
above10(7)
above10(12)
above10 <- function(x) {
use <- x >10
x[use]
}
above10(12)
above10(7)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for ( i in i:nc ) {
means[i] <- mean(y[,i])
}
means
}
columnmean(airquality)
columnmean(airquality)
columnmean(airquality)
lm <- function(x) {x*x}
lm
ls()
get(add2)
get("add2")
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
pollutantmean <- function(directory, id) {
files <- list.files(directory, full.names = TRUE)
all_data <- data.frame()
for ( i in id ) {
data <- read.csv(files[i])
all_data <- rbind(all_data, data)
}
}
pollutantmean("specdata",1:10)
head(pollutantmean("specdata",1:10))
pollutantmean <- function(directory, id) {
files <- list.files(directory)
all_data <- data.frame()
for ( i in id ) {
data <- read.csv(files[i])
all_data <- rbind(all_data, data)
}
}
head(pollutantmean("specdata",1:10))
pollutantmean <- function(directory, id) {
files <- list.files(directory)
all_data <- data.frame()
pollutantmean("specdata",1:10)
}
}
pollutantmean <- function(directory, id) {
files <- list.files(directory)
all_data <- data.frame()
# for ( i in id ) {
#   data <- read.csv(files[i])
#   all_data <- rbind(all_data, data)
#
# }
}
pollutantmean("specdata",1:10)
View(pollutantmean)
View(pollutantmean)
View(pollutantmean)
x <- c(rnorm(10), runinf(10), rnorm(10,1))
x <- c(rnorm(10), runif(10), rnorm(10,1))
f <- gl(3,10)
x
f
split(x,f)
x <- c(rnorm(10), runif(10), rnorm(10,1))
f <- gl(3,10)
lapply(split(x,f), mean)
x <- c(rnorm(10), runif(10), rnorm(10,1))
f <- gl(3,10)
x1 = lapply(split(x,f), mean)
x2 = tapply(x,mean)
x <- c(rnorm(10), runif(10), rnorm(10,1))
f <- gl(3,10)
x1 = lapply(split(x,f), mean)
x2 = tapply(x,gl(3,10),mean)
x1 = = x2
x1 == x2
# Beispiel Daten
schueler <- c("Alice", "Bob", "Alice", "Bob", "Alice", "Bob")
fach <- c("Mathematik", "Mathematik", "Englisch", "Englisch", "Mathematik", "Englisch")
semester <- c(1, 1, 1, 1, 2, 2)
note <- c(3.5, 4.0, 2.0, 3.0, 4.0, 3.5)
# Dataframe erstellen
df <- data.frame(Schueler = schueler, Fach = fach, Semester = semester, Note = note)
# Durchschnittsnote jedes Schülers für jedes Fach über alle Semester hinweg berechnen
durchschnitt_noten <- tapply(df$Note, list(df$Schueler, df$Fach), mean)
# Ergebnis anzeigen
print(durchschnitt_noten)
x <- c(rnorm(10), runif(10), rnorm(10,1))
f <- gl(3,10)
x1 = lapply(split(x,f), mean)
x2 = tapply(x,gl(3,10),mean)
x <- c(rnorm(10), runif(10), rnorm(10,1))
f <- gl(3,10)
x1 = lapply(split(x,f), mean)
x2 = tapply(x,gl(3,10),mean)
x <- c(rnorm(10), runif(10), rnorm(10,1))
f <- gl(3,10)
x1 = lapply(split(x,f), mean)
x2 = tapply(x,gl(3,10),mean)
library(datasets)
head(airquality)
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
head(s)
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x[ c("Ozone", "Solar.R", "Wind")]))
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
lapply(s, colMeans(x[ c("Ozone", "Solar.R", "Wind")]))
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x[ c("Ozone", "Solar.R", "Wind")]))
lapply(s,  colMeans(s[ c("Ozone", "Solar.R", "Wind")]))
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
# lapply(s, function(x) colMeans(x[ c("Ozone", "Solar.R", "Wind")]))
colMeans(s[c("Ozone", "Solar.R", "Wind")])
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
# lapply(s, function(x) colMeans(x[ c("Ozone", "Solar.R", "Wind")]))
colMeans(s[c("Ozone", "Solar.R", "Wind")])
# Erstellen einer gemischten Liste
mixed_list <- list(
num_vector = c(1, 2, 3, 4, 5),
char_vector = c("a", "b", "c"),
df = data.frame(
Ozone = c(41, 36, 12, 18),
Solar.R = c(190, 118, 149, 313),
Wind = c(7.4, 8.0, 12.6, 11.5)
)
)
# Definieren einer Funktion, die die Klasse jedes Listenelements zurückgibt
get_class <- function(x) {
class(x)
}
# Anwendung von lapply auf die Liste, um die Klasse jedes Elements zu ermitteln
result <- lapply(mixed_list, get_class)
# Ausgabe des Ergebnisses
print(result)
mixed_list <- list(
num_vector = c(1, 2, 3, 4, 5),
char_vector = c("a", "b", "c"),
df = data.frame(
Ozone = c(41, 36, 12, 18),
Solar.R = c(190, 118, 149, 313),
Wind = c(7.4, 8.0, 12.6, 11.5)
)
)
# Definieren einer Funktion, die die Klasse jedes Listenelements zurückgibt
get_class <- function(x) {
class(x)
}
# Anwendung von lapply auf die Liste, um die Klasse jedes Elements zu ermitteln
result <- lapply(mixed_list, get_class)
# Ausgabe des Ergebnisses
print(result)
df <- data.frame(
Ozone = c(41, 36, 12, 18, NA),
Solar.R = c(190, 118, 149, 313, NA),
Wind = c(7.4, 8.0, 12.6, 11.5, NA)
)
df
column_means <- lapply(df, mean, na.rm = TRUE)
lapply(df, mean, na.rm = TRUE)
sapply(df, mean, na.rm = TRUE)
# Definiere eine Funktion, die einen Fehler verursacht
cause_error <- function() {
nested_function()
}
# Eine weitere Funktion, die den Fehler auslöst
nested_function <- function() {
stop("Absichtlicher Fehler!")
}
# Versuche, die Funktion auszuführen, um den Fehler zu verursachen
try(cause_error())
# Unmittelbar nach dem Fehler traceback() aufrufen, um den Aufrufstapel anzuzeigen
traceback()
# Definiere eine Funktion, die einen Fehler verursacht
cause_error <- function() {
nested_function()
}
# Eine weitere Funktion, die den Fehler auslöst
nested_function <- function() {
stop("Absichtlicher Fehler!")
}
# Versuche, die Funktion auszuführen, um den Fehler zu verursachen
try(cause_error())
# Unmittelbar nach dem Fehler traceback() aufrufen, um den Aufrufstapel anzuzeigen
traceback()
ls()
rm()
ls
# Definiere eine Funktion, die einen Fehler verursacht
cause_error <- function() {
nested_function()
}
# Eine weitere Funktion, die den Fehler auslöst
nested_function <- function() {
stop("Absichtlicher Fehler!")
}
# Versuche, die Funktion auszuführen, um den Fehler zu verursachen
try(cause_error())
# Unmittelbar nach dem Fehler traceback() aufrufen, um den Aufrufstapel anzuzeigen
traceback()
rm(colMeans())
ls
rm()
# Definiere eine Funktion, die einen Fehler verursacht
cause_error <- function() {
nested_function()
}
# Eine weitere Funktion, die den Fehler auslöst
nested_function <- function() {
stop("Absichtlicher Fehler!")
}
# Versuche, die Funktion auszuführen, um den Fehler zu verursachen
try(cause_error())
# Unmittelbar nach dem Fehler traceback() aufrufen, um den Aufrufstapel anzuzeigen
traceback()
# Definiere eine Funktion, die einen Fehler verursacht
cause_error <- function() {
nested_function()
}
# Eine weitere Funktion, die den Fehler auslöst
nested_function <- function() {
stop("Absichtlicher Fehler!")
}
# Versuche, die Funktion auszuführen, um den Fehler zu verursachen
try(cause_error())
# Unmittelbar nach dem Fehler traceback() aufrufen, um den Aufrufstapel anzuzeigen
traceback()
# Definiere eine Funktion, die einen Fehler verursacht
cause_error <- function() {
nested_function()
}
# Eine weitere Funktion, die den Fehler auslöst
nested_function <- function() {
stop("Absichtlicher Fehler!")
}
# Versuche, die Funktion auszuführen, um den Fehler zu verursachen
try(cause_error())
# Unmittelbar nach dem Fehler traceback() aufrufen, um den Aufrufstapel anzuzeigen
traceback()
rm()
# Definiere eine Funktion, die einen Fehler verursacht
cause_error <- function() {
nested_function()
}
# Eine weitere Funktion, die den Fehler auslöst
nested_function <- function() {
stop("Absichtlicher Fehler!")
}
# Versuche, die Funktion auszuführen, um den Fehler zu verursachen
try(cause_error())
# Unmittelbar nach dem Fehler traceback() aufrufen, um den Aufrufstapel anzuzeigen
traceback()
rm(list = ls())
# Definiere eine Funktion, die einen Fehler verursacht
cause_error <- function() {
nested_function()
}
# Eine weitere Funktion, die den Fehler auslöst
nested_function <- function() {
stop("Absichtlicher Fehler!")
}
# Versuche, die Funktion auszuführen, um den Fehler zu verursachen
try(cause_error())
# Unmittelbar nach dem Fehler traceback() aufrufen, um den Aufrufstapel anzuzeigen
traceback()
rm(list = ls())
# Definiere eine Funktion, die einen Fehler verursacht
cause_error <- function() {
nested_function()
}
# Eine weitere Funktion, die den Fehler auslöst
nested_function <- function() {
stop("Absichtlicher Fehler!")
}
# Versuche, die Funktion auszuführen, um den Fehler zu verursachen
try(cause_error())
# Unmittelbar nach dem Fehler traceback() aufrufen, um den Aufrufstapel anzuzeigen
traceback()
ls()
ls()
rm(list = ls())
# Definiere eine Funktion, die einen Fehler verursacht
cause_error <- function() {
nested_function()
}
# Eine weitere Funktion, die den Fehler auslöst
nested_function <- function() {
stop("Absichtlicher Fehler!")
}
# Versuche, die Funktion auszuführen, um den Fehler zu verursachen
try(cause_error())
# Unmittelbar nach dem Fehler traceback() aufrufen, um den Aufrufstapel anzuzeigen
traceback()
